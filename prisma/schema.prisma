generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  credits         Int     @default(75)
  reservedCredits Int     @default(0) @map("reserve_credits")
  subscriptionId  String? @unique @map("subscription_id")

  accounts         Account[]
  sessions         Session[]
  Material         Material[]
  Transaction      Transaction[]
  UserActivity     UserActivity[]
  CouponRedemption CouponRedemption[]
  Subscription     Subscription[]

  @@map("users")
}

model Subscription {
  id      String           @id @default(cuid())
  userId  String           @map("user_id")
  plan    SubscriptionType @default(student) @map("subscription_type")
  credits Int              @default(0) @map("credits")
  price   Int              @default(0) @map("price")
  status  String?          @map("status")

  startedAt DateTime  @default(now()) @map("started_at")
  expiredAt DateTime? @map("expired_at")

  renewal Boolean @default(false) @map("renewal")
  refId   String? @unique @map("ref_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Material {
  id          String       @id @default(ulid())
  userId      String       @map("user_id")
  title       String
  description String?
  course      String?
  exam        String?
  language    String?      @default("english")
  complexity  Complexity   @default(advanced)
  type        MaterialType @default(theory)
  subject     String
  status      Status       @default(pending)
  pdfUrl      String?      @map("pdf_url")
  price       Int?         @default(0)
  isPublic    Boolean      @default(false) @map("is_public")

  completedParts Int @default(0) @map("completed_parts")
  totalParts     Int @default(0) @map("total_parts")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserActivity UserActivity[]
  Task         MaterialTask[]
}

model MaterialTask {
  id               String  @id @default(ulid())
  materialId       String  @map("material_id")
  topic            String
  data             Json
  status           Status  @default(pending)
  tokensUsed       Int     @default(0) @map("tokens_used")
  partialResultUrl String? @map("partial_result")

  currIndex  Int @default(0) @map("curr_index")
  totalIndex Int @default(0) @map("total_index")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  material Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
}

model Transaction {
  id             String      @id @default(ulid())
  userId         String      @map("user_id")
  dodoCustomerId String      @map("dodo_customer_id")
  type           PaymentType
  amount         Float
  tax            Float       @default(0)
  status         String      @default("processing")
  currency       String?

  productId String? @map("product_id")
  quantity  Int?    @default(1)

  paymentId   String? @map("payment_id")
  paymentLink String? @map("payment_link")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserActivity {
  id         String             @id @default(ulid())
  userId     String             @map("user_id")
  action     UserActivityAction
  materialId String?            @map("material_id")
  details    Json?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  material Material? @relation(fields: [materialId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CouponCode {
  id                 String    @id @default(ulid())
  code               String    @unique
  description        String?   @default("")
  credits            Int       @default(0)
  maxRedemptions     Int       @default(0) @map("max_redemptions")
  currentRedemptions Int       @default(0) @map("current_redemptions")
  expiresAt          DateTime? @map("expires_at")
  isActive           Boolean   @default(true) @map("is_active")

  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  CouponRedemption CouponRedemption[]
}

model CouponRedemption {
  id         String   @id @default(ulid())
  userId     String   @map("user_id")
  couponId   String   @map("coupon_id")
  redeemedAt DateTime @default(now()) @map("redeemed_at")

  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon CouponCode @relation(fields: [couponId], references: [id], onDelete: Cascade)
}

model WaitlistUsers {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String
}

enum MaterialType {
  theory
  qbank
}

enum Complexity {
  beginner
  intermediate
  advanced
}

enum PaymentType {
  credits
  subscription
}

enum SubscriptionType {
  scholar
  prodigy
  student
  visionary
}

enum Status {
  pending
  inprogress
  completed
  failed
}

enum UserActivityAction {
  generate
}
